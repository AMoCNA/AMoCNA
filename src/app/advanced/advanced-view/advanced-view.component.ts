import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';
import {CustomQuery} from "../../shared/models/metrics/custom-query.model";
import {HephaestusService} from "../../shared/service/hephaestus/hephaestus.service";
import {take} from "rxjs";

@Component({
    selector: 'app-advanced-view',
    templateUrl: './advanced-view.component.html',
    styleUrls: ['./advanced-view.component.scss']
})
export class AdvancedViewComponent implements OnInit {
    @ViewChild('tagInput') tagInput!: ElementRef
    @ViewChild('queryInput') queryInput!: ElementRef

    customQueries: CustomQuery[] = [];

    constructor(private hephaestusService: HephaestusService) {
    }

    ngOnInit(): void {
        this.loadSavedMetrics();
    }

    addCustomQuery(event: any) {
        //prevent refresh on submit
        event.preventDefault();

        //add tag and query
        const tag: string = this.tagInput.nativeElement.value;
        const query: string = this.queryInput.nativeElement.value;
        if (!this.validateInput(tag, query)) return;
        this.customQueries.push(new CustomQuery(tag, query))

        //clear input and set focus
        this.tagInput.nativeElement.value = '';
        this.queryInput.nativeElement.value = '';
        this.tagInput.nativeElement.focus();
    }

    removeCustomQuery(id: number) {
        this.customQueries.splice(id, 1);
    }

    sendCustomQuery() {
        this.hephaestusService.saveCustomMetrics(this.queriesToJson());
    }

    validateInput(tag: string, query: string) {
        return !(tag == "" || tag.startsWith("__#AUTOGENERATED__") || query == "");
    }

    queriesToJson() {
        const arr: Array<{ tag: string, queryString: string }> = [];
        for (const customQuery of this.customQueries) {
            arr.push(customQuery.toJSON());
        }
        console.log(arr);
        return arr;
    }

    loadSavedMetrics() {
        this.hephaestusService.getSavedCustomMetrics().pipe(take(1)).subscribe((savedQueries: Array<{ tag: string, queryString: string }>) => {
            console.log("savedQueries: ");
            console.log(savedQueries);
            for (const savedQuery of savedQueries) {
                    this.customQueries.push(new CustomQuery(savedQuery.tag, savedQuery.queryString));
                }
            }
        )
    }
}
